describe('View - custom', function () {
    'use strict';

    var assert = chai.assert,
        View   = wig.View,
        domFixture,
        viewRoot;

    before(function () {
        domFixture = document.getElementById('fixture');
    });

    beforeEach(function () {
        viewRoot = document.createElement('div');
        domFixture.appendChild(viewRoot);
    });

    afterEach(function () {
        domFixture.innerHTML = '';
        wig.View.Registry.empty();
    });

    it('uses custom tagName', function () {
        var CustomView = View.extend({
                tagName: 'p'
            }),
            view = new CustomView();

        assert.equal(view.node.constructor, HTMLParagraphElement);
    });

    it('applies className with inherited View className', function () {
        var CustomViewParent = View.extend({
                className: 'CustomViewParent'
            }),
            CustomView = CustomViewParent.extend({
                className: 'CustomView'
            }),
            view = new CustomView();

        assert.equal(view.node.getAttribute('class'), 'View CustomViewParent CustomView');
    });

    it('applies className with inherited View className', function () {
        var CustomViewParent = View.extend({
                className: 'CustomViewParent'
            }),
            CustomView = CustomViewParent.extend({
                className: 'CustomView'
            }),
            view = new CustomView();

        assert.equal(view.node.getAttribute('class'), 'View CustomViewParent CustomView');
    });

    it('renders template with defaults', function () {
        var template = '<h1>{{ title }}</h1>',
            title = 'title',
            CustomView = View.extend({
                template: template,
                defaults: {
                    title: title
                }
            }),
            view = new CustomView({
                title: title
            });

        wig.renderView(view, viewRoot);

        assert.equal(viewRoot.innerHTML, template.replace('{{ title }}', title));
    });

    it('renders template with context', function () {
        var title = 'title',
            template = '<h1>{{ title }}</h1>',
            CustomView = View.extend({
                template: template
            }),
            view = new CustomView({
                title: title
            });

        wig.renderView(view, viewRoot);

        assert.equal(viewRoot.innerHTML, template.replace('{{ title }}', title));
    });

    it('props are available on the View instance', function () {
        var props = [
                'a',
                'b'
            ],
            a = {},
            b = {},
            CustomView = View.extend({
                props: props
            }),
            view = new CustomView({
                a: a,
                b: b
            });

        assert.equal(view.a, a);
        assert.equal(view.b, b);
    });

    it('events are invoked on the View instance', function (done) {
        var event = {
                target: viewRoot,
                type: 'click'
            },
            CustomView = View.extend({
                events: {
                    click: function (evt) {
                        assert.equal(evt, event);
                        done();
                    }
                }
            }),
            view = new CustomView();

        wig.renderView(view, viewRoot);

        wig.env.uiEventProxy.listener(event);
    });

    it('parses context by returning a new context generated by the parsing method', function () {
        var context = {
                a: 1
            },
            CustomView = View.extend({
                parseContext: function (newContext) {
                    return {
                        a: newContext.a,
                        b: newContext.a + 1
                    };
                }
            }),
            view = new CustomView(context);

        assert.equal(view.get('a'), context.a);
        assert.equal(view.get('b'), context.a + 1);
    });

    it('parses context by decorating the context', function () {
        var context = {
                a: 1
            },
            CustomView = View.extend({
                parseContext: function (newContext) {
                    newContext.b = newContext.a + 1;
                }
            }),
            view = new CustomView(context);

        assert.equal(view.get('a'), context.a);
        assert.equal(view.get('b'), context.a + 1);
    });

    it('onAttach is executed after the has been rendered into the DOM', function () {
        var CustomView = View.extend({
                onAttach: function () {
                    assert.equal(viewRoot.parentNode, domFixture);
                }
            }),
            view = new CustomView();

        wig.renderView(view, viewRoot);
    });

    it('onDetach is before the is detached from the DOM', function () {
        var div = document.createElement('div'),
            CustomView = View.extend({
                onDetach: function () {
                    assert.equal(this.getNode().parentNode, viewRoot);
                }
            }),
            view = new CustomView();

        viewRoot.appendChild(div);
        wig.renderView(view, div);
        view.remove();

        assert.equal(div.parentNode, null);
    });

});